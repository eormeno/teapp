# Prompt para Tutorial de Laravel Blade y Tailwind CSS

## Material de Referencia
Utiliza el diff de Git proporcionado como base principal para este tutorial. Este diff muestra los cambios específicos realizados entre dos ramas, en donde creé las clases necesarias para crear un CRUD de actividades.

## Contexto
Como experto en Laravel, Blade y Tailwind CSS, crea un tutorial paso a paso para principiantes sobre la programación de un CRUD de actividades. Basa tus explicaciones y ejemplos en los cambios mostrados en el diff proporcionado y en el código fuente que tienes en el proyecto.

## Estructura del Tutorial
1. Comando artisan utilizados
	- Explicación del comando `php artisan make:model Activity -a` que crea las clases de: modelo, controlador, factory, seeder, form requests, y policy.
	- Explicaciones de los comandos artisan para crear las vistas vacías del crud:
		- `php artisan make:view activities.create`
		- `php artisan make:view activities.show`
		- `php artisan make:view activities.index`
		- `php artisan make:view activities.edit`
		
2. Instalación del paquete Intervention de Laravel para crear y manejar imágenes.

```bash
composer require intervention/image-laravel
```

3. Explicación del factory de Activity, que permite crear actividades con datos fake, incluida una imagen en base64. Explica cómo hace para obtener de un servicio web https://picsum.photos/{$width}/{$height}, imágenes fake, tomar sus datos binarios y convertirlos en base 64.

2. Explicación de form request y policy
   - Definición y propósito
   - Ventajas de usarlos

2. Análisis del código original
   - Describir la estructura inicial de las vistas antes de la refactorización
   - Identificar patrones comunes en las vistas que justifican la abstracción

3. Proceso de abstracción de layouts (basado en el diff)
   - Explicar los cambios específicos mostrados en el diff
   - Detallar cómo se identificó y creó el componente 'x-crud-layout'
   - Mostrar la implementación de la herencia desde 'x-event-layout'

4. Implementación práctica
   - Utilizar ejemplos directos del diff para mostrar:
     - Creación del componente
     - Migración de las vistas existentes al nuevo layout
   - Explicar cada cambio significativo visible en el diff

5. Conceptos clave (ilustrados con el código del diff)
   - Variables en componentes Blade
   - Uso de slots (nombrados y anónimos)
   - Parámetros y atributos

6. Mejores prácticas
   - Basadas en los patrones observados en el diff
   - Convenciones de nomenclatura utilizadas
   - Organización de archivos según la estructura del proyecto

## Elementos a incluir
- Snippets de código relevantes extraídos directamente del diff
- Comparaciones antes/después utilizando el código real del proyecto
- Explicaciones claras de los cambios mostrados en el diff

## Tono y estilo
- Dirigido a principiantes
- Usar lenguaje claro y directo
- Relacionar cada concepto con ejemplos concretos del diff

## Formato
- Usar encabezados para separar secciones
- Incluir ejemplos de código formateados correctamente
- Proporcionar notas o advertencias cuando sea relevante
- Referenciar líneas específicas del diff cuando sea apropiado